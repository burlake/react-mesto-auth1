{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка ${res.status}`);\n  }\n  _request(url, options) {\n    return fetch(`${this._url}${url}`, options).then(this._checkResponse);\n  }\n  getInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n  getCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n  setUserInfo(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  }\n  setUserAvatar(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n  addCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    let method = 'DELETE';\n    if (isLiked) {\n      method = 'PUT';\n    }\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: method,\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-69\",\n  headers: {\n    authorization: \"ae20785e-e850-4452-960a-73f188fc9474\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","baseUrl","_headers","headers","_authorization","authorization","_checkResponse","res","ok","json","Promise","reject","status","_request","url","fetch","then","getInfo","getCards","setUserInfo","data","method","body","JSON","stringify","name","about","setUserAvatar","avatar","addCard","link","changeLikeCardStatus","cardId","isLiked","deleteCard","api"],"sources":["/Users/elizavetaburlakova/Desktop/dev/react-mesto-auth1/src/utils/api.js"],"sourcesContent":["class Api {\n    constructor(options) {\n        this._url = options.baseUrl;\n        this._headers = options.headers;\n        this._authorization = options.headers.authorization;\n    }\n\n    _checkResponse(res) {\n        return res.ok ? res.json() : Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    _request(url, options) {\n        return fetch(`${this._url}${url}`, options)\n          .then(this._checkResponse)\n      }\n\n    getInfo() {\n        return fetch(`${this._url}/users/me`, {\n            headers: {\n                authorization: this._authorization,\n            },\n        }).then(this._checkResponse);\n    }\n\n    getCards() {\n        return fetch(`${this._url}/cards`, {\n            headers: {\n                authorization: this._authorization,\n            },\n        }).then(this._checkResponse);\n    }\n\n    setUserInfo(data) {\n        return fetch(`${this._url}/users/me`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about,\n            }),\n        }).then(this._checkResponse);\n    }\n\n    setUserAvatar(data) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.avatar,\n            }),\n        }).then(this._checkResponse);\n    }\n\n    addCard(data) {\n        return fetch(`${this._url}/cards`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link,\n            }),\n        }).then(this._checkResponse);\n    }\n\n    changeLikeCardStatus(cardId, isLiked) {\n        let method = 'DELETE';\n\n        if (isLiked) {\n            method = 'PUT';\n        }\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n            method: method,\n            headers: {\n                authorization: this._authorization,\n            }\n        }).then(this._checkResponse);\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._url}/cards/${cardId}`, {\n            method: \"DELETE\",\n            headers: {\n                authorization: this._authorization,\n            },\n        }).then(this._checkResponse);\n    }\n}\n\nconst api = new Api({\n    baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-69\",\n    headers: {\n        authorization: \"ae20785e-e850-4452-960a-73f188fc9474\",\n        \"Content-Type\": \"application/json\",\n    },\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}